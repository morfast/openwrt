diff -Naur ppp-2.4.5.0/pppd/chap-new.c ppp-2.4.5/pppd/chap-new.c
--- ppp-2.4.5.0/pppd/chap-new.c	2012-02-12 12:03:55.000000000 +0800
+++ ppp-2.4.5/pppd/chap-new.c	2012-04-07 21:02:08.000000000 +0800
@@ -37,6 +37,8 @@
 #include "chap-new.h"
 #include "chap-md5.h"
 
+#include "syncppp.h"
+
 #ifdef CHAPMS
 #include "chap_ms.h"
 #define MDTYPE_ALL (MDTYPE_MICROSOFT_V2 | MDTYPE_MICROSOFT | MDTYPE_MD5)
@@ -59,6 +61,7 @@
 int chap_max_transmits = 10;
 int chap_rechallenge_time = 0;
 int chapms_strip_domain = 0;
+int npppd = 0;
 
 /*
  * Command-line options.
@@ -72,6 +75,8 @@
 	  "Set interval for rechallenge", OPT_PRIO },
 	{ "chapms-strip-domain", o_bool, &chapms_strip_domain,
 	  "Strip the domain prefix before the Username", 1 },
+    { "syncppp", o_int, &npppd,
+      "number of pppd to sync when sending CHAP respond", OPT_PRIO },
 	{ NULL }
 };
 
@@ -492,6 +497,19 @@
 	p[2] = len >> 8;
 	p[3] = len;
 
+    if (npppd > 1) {
+        if (syncppp(npppd) < 0) {
+            error("syncppp sync fail");
+            sem_unlink(SEM_COUNT_NAME);
+            sem_unlink(SEM_BLOCK_NAME);
+        } else {
+            info("syncppp sync succeeded");
+        }   
+    } else {
+        info("syncppp not active");
+    }
+
+
 	output(0, response, PPP_HDRLEN + len);
 }
 
diff -Naur ppp-2.4.5.0/pppd/Makefile.linux ppp-2.4.5/pppd/Makefile.linux
--- ppp-2.4.5.0/pppd/Makefile.linux	2012-02-12 12:03:55.000000000 +0800
+++ ppp-2.4.5/pppd/Makefile.linux	2012-04-07 20:57:22.000000000 +0800
@@ -13,16 +13,16 @@
 
 PPPDSRCS = main.c magic.c fsm.c lcp.c ipcp.c upap.c chap-new.c md5.c ccp.c \
 	   ecp.c ipxcp.c auth.c options.c sys-linux.c md4.c chap_ms.c \
-	   demand.c utils.c tty.c eap.c chap-md5.c session.c
+	   demand.c utils.c tty.c eap.c chap-md5.c session.c syncppp.c
 
 HEADERS = ccp.h session.h chap-new.h ecp.h fsm.h ipcp.h \
 	ipxcp.h lcp.h magic.h md5.h patchlevel.h pathnames.h pppd.h \
-	upap.h eap.h
+	upap.h eap.h syncppp.h
 
 MANPAGES = pppd.8
 PPPDOBJS = main.o magic.o fsm.o lcp.o ipcp.o upap.o chap-new.o md5.o ccp.o \
 	   ecp.o auth.o options.o demand.o utils.o sys-linux.o ipxcp.o tty.o \
-	   eap.o chap-md5.o session.o
+	   eap.o chap-md5.o session.o syncppp.o
 
 #
 # include dependencies if present
@@ -33,7 +33,7 @@
 # CC = gcc
 #
 COPTS = -O2 -pipe -Wall -g
-LIBS =
+LIBS = -lpthread
 
 # Uncomment the next 2 lines to include support for Microsoft's
 # MS-CHAP authentication protocol.  Also, edit plugins/radius/Makefile.linux.
@@ -70,6 +70,9 @@
 # Enable plugins
 PLUGIN=y
 
+# Enable syncppp
+SYNC_PPP=y
+
 # Enable Microsoft proprietary Callback Control Protocol
 #CBCP=y
 
@@ -97,6 +100,7 @@
 endif
 endif
 
+
 # EAP SRP-SHA1
 ifdef USE_SRP
 CFLAGS	+= -DUSE_SRP -DOPENSSL -I/usr/local/ssl/include
diff -Naur ppp-2.4.5.0/pppd/syncppp.c ppp-2.4.5/pppd/syncppp.c
--- ppp-2.4.5.0/pppd/syncppp.c	1970-01-01 08:00:00.000000000 +0800
+++ ppp-2.4.5/pppd/syncppp.c	2012-04-08 14:42:48.000000000 +0800
@@ -0,0 +1,75 @@
+#include<stdio.h>
+#include<semaphore.h>
+#include<fcntl.h>
+#include<stdlib.h>
+#include<time.h>
+#include<errno.h>
+#include "pppd.h"
+#include "syncppp.h"
+
+int syncppp(int nproc)
+{
+    int flags;
+    int value;
+    sem_t *block; 
+    sem_t *count;
+    struct timespec ts;
+
+    if (nproc <= 1) {
+        error("syncppp: number of pppd should be larger than 1");
+        return -1;
+    }
+
+    if (clock_gettime(CLOCK_REALTIME, &ts) == -1) {
+        error("clock_gettime error");
+        return -1;
+    }
+    ts.tv_sec += SYNCPPP_TIMEOUT;
+
+
+    flags = O_RDWR | O_CREAT;
+    block = sem_open(SEM_BLOCK_NAME, flags, 0644, 0);
+    count = sem_open(SEM_COUNT_NAME, flags, 0644, 0);
+    if (block == SEM_FAILED || count == SEM_FAILED) {
+        error("syncppp: sem_open failed");
+        return -1;
+    }
+
+    if (sem_post(count) < 0) {
+        error("syncppp: sem_post failed");
+        return -1;
+    }
+    if (sem_getvalue(count, &value) < 0) {
+        error("syncppp: sem_getvalue failed");
+        return -1;
+    }
+    info("%d pppd have arrived, waiting for the left %d", value, nproc-value);
+    if (value >= nproc) {
+        while (nproc-1 > 0) {
+            if (sem_post(block) < 0) {
+                error("syncppp: sem_post failed");
+                return -1;
+            }
+            nproc--;
+        }
+    } else {
+        if (sem_timedwait(block, &ts) < 0) {
+            if (errno == ETIMEDOUT) {
+                error("syncppp: sem_timewait time out");
+            } else {
+                error("syncppp: sem_timewait error");
+            }
+            return -1;
+        }
+
+    }
+
+    sem_close(count);
+    sem_close(block);
+
+    sem_unlink(SEM_COUNT_NAME);
+    sem_unlink(SEM_BLOCK_NAME);
+
+    return 0;
+}
+
diff -Naur ppp-2.4.5.0/pppd/syncppp.h ppp-2.4.5/pppd/syncppp.h
--- ppp-2.4.5.0/pppd/syncppp.h	1970-01-01 08:00:00.000000000 +0800
+++ ppp-2.4.5/pppd/syncppp.h	2012-04-08 14:39:15.000000000 +0800
@@ -0,0 +1,3 @@
+#define SEM_BLOCK_NAME  "block"
+#define SEM_COUNT_NAME  "count"
+#define SYNCPPP_TIMEOUT 5
